// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/NewFile.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class NewFile {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object A=null;
  public static Object B=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=28;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=30;
      A=$fix($opIntvlY('a','z'));
      $line=31;
      B=$fix($opIntvlY('0','9'));
      $line=33;
      Object coder=$fix(NewFile.createCoder());
      $line=34;
      Object deCoder=$fix(NewFile.createDecoder());
      $line=42;
      Utilities.testCodeDecode($cast(gold.structures.automaton.ITransducer.class,coder),$cast(gold.structures.automaton.ITransducer.class,deCoder));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"main",$line);
    }
  }
  public static ITransducer createCoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=53;
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object let:GCollections.unmodifiableCollection($opIntvlY('a','z'))) {
        int $v3=$int(0);
        int $v4=$int(6);
        for (int cant=$v3; cant<=$v4; cant++) {
          int $v5=$int(0);
          int $v6=$int(6);
          for (int pos=$v5; pos<=$v6; pos++) {
            $v1.add(GCollections.asList(let,cant,pos));
          }
        }
      }
      Object Q=$fix($opUnionY($opUnionY($opUnionY($opIntvlY('a','z'),$v1),GCollections.asSet("I")),GCollections.asSet("E")));
      $line=55;
      Object \u03A3=$fix($opIntvlY('a','z'));
      $line=56;
      Object \u03A3_=$fix($opUnionY($opUnionY($opUnionY(\u03A3,GCollections.asSet('$')),$opIntvlY('0','9')),GCollections.asSet('.')));
      $line=57;
      Object q_0=$fix("I");
      $line=58;
      Object F=$fix(GCollections.asSet("I"));
      $line=60;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,\u03A3_,q_0,F,new GMethod(NewFile.class,"\u03B4"),new GMethod(NewFile.class,"g"),new GMethod(NewFile.class,"h")});
      if (true) break $try;
      $line=61;
      $rethrow(new RuntimeException("The function \"createCoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"createCoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=68;
      if (($opEqualY(state,"I")&&$opMembrY(input,$opIntvlY('a','z')))) {
        $line=68;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=70;
        if (($opMembrY(state,$opIntvlY('a','z'))&&$opEqualY(input,state))) {
          $line=72;
          Object let=$fix(state);
          $line=73;
          $result=GCollections.asList(let,1,1);
          if (true) break $try;
        }
        else {
          $line=75;
          if (($opMembrY(state,$opIntvlY('a','z'))&&!$opEqualY(input,state))) {
            $line=76;
            Object let=$fix(state);
            $line=77;
            $result=GCollections.asList(let,0,1);
            if (true) break $try;
          }
          else {
            $line=80;
            if (($opEqualY($opAbsolY(state),3)&&$opLessqY($getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2})))) {
              $line=83;
              if ($opEqualY($getArrayValue(state,new Object[]{2}),6)) {
                $line=86;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                  $line=88;
                  $result="I";
                  if (true) break $try;
                }
                else {
                  $line=90;
                  if (!$opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                    $line=92;
                    $result="I";
                    if (true) break $try;
                  }
                }
              }
              else {
                $line=96;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                  $line=98;
                  Object $v7=$getArrayValue(state,new Object[]{0});
                  Object $v8=$getArrayValue(state,new Object[]{1});
                  Object $v9=$getArrayValue(state,new Object[]{2});
                  Object let=$fix($v7);
                  Object cant=$fix($v8);
                  Object pos=$fix($v9);
                  $line=99;
                  $result=GCollections.asList(let,$opAdditY(cant,1),$opAdditY(pos,1));
                  if (true) break $try;
                }
                else {
                  $line=101;
                  if (!$opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                    $line=103;
                    Object $v10=$getArrayValue(state,new Object[]{0});
                    Object $v11=$getArrayValue(state,new Object[]{1});
                    Object $v12=$getArrayValue(state,new Object[]{2});
                    Object let=$fix($v10);
                    Object cant=$fix($v11);
                    Object pos=$fix($v12);
                    $line=104;
                    $result=GCollections.asList(let,cant,$opAdditY(pos,1));
                    if (true) break $try;
                  }
                }
              }
            }
            else {
              $line=109;
              $result="E";
              if (true) break $try;
            }
          }
        }
      }
      $line=122;
      $rethrow(new RuntimeException("The function \"\u03B4(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object h(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=129;
      if (($opEqualY(state,"I")&&$opMembrY(input,$opIntvlY('a','z')))) {
        $line=131;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=133;
        if (($opMembrY(state,$opIntvlY('a','z'))&&$opEqualY(input,state))) {
          $line=135;
          $result="";
          if (true) break $try;
        }
        else {
          $line=137;
          if (($opMembrY(state,$opIntvlY('a','z'))&&!$opEqualY(input,state))) {
            $line=138;
            Object c=$fix($cast(String.class,1));
            $line=139;
            Object d=$fix($cast(String.class,input));
            $line=141;
            $result=$opAdditY(c,input);
            if (true) break $try;
          }
          else {
            $line=144;
            if (($opEqualY($opAbsolY(state),3)&&$opLessqY($getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2})))) {
              $line=146;
              if ($opEqualY($getArrayValue(state,new Object[]{2}),6)) {
                $line=148;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                  $line=150;
                  Object can=$fix($cast(String.class,$getArrayValue(state,new Object[]{1})));
                  $line=153;
                  $result=$opAdditY("$",can);
                  if (true) break $try;
                }
                else {
                  $line=155;
                  if (!$opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                    $line=157;
                    Object rpos=$fix($opAdditY($getArrayValue(state,new Object[]{2}),1));
                    $line=159;
                    Object p=$fix($cast(String.class,rpos));
                    $line=160;
                    Object l=$fix($cast(String.class,input));
                    $line=161;
                    Object c=$fix($cast(String.class,$getArrayValue(state,new Object[]{1})));
                    $line=162;
                    $result=$opAdditY($opAdditY($opAdditY(p,l),"$"),c);
                    if (true) break $try;
                  }
                }
              }
              else {
                $line=168;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                  $line=170;
                  $result="";
                  if (true) break $try;
                }
                else {
                  $line=172;
                  if (!$opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                    $line=174;
                    Object rpos=$fix($opAdditY($getArrayValue(state,new Object[]{2}),1));
                    $line=176;
                    Object p=$fix($cast(String.class,rpos));
                    $line=177;
                    Object l=$fix($cast(String.class,input));
                    $line=180;
                    $result=$opAdditY(p,l);
                    if (true) break $try;
                  }
                }
              }
            }
            else {
              $line=189;
              $result="";
              if (true) break $try;
            }
          }
        }
      }
      $line=200;
      $rethrow(new RuntimeException("The function \"h(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"h",$line);
    }
    return $result;
  }
  public static Object g(Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=207;
      $result="";
      if (true) break $try;
      $line=208;
      $rethrow(new RuntimeException("The function \"g(s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"g",$line);
    }
    return $result;
  }
  public static ITransducer createDecoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=211;
      gold.structures.set.ISet $v13=$newSet();
      $v14:for (Object d:GCollections.unmodifiableCollection(GCollections.asSet(3,2,5))) {
        for (Object s:GCollections.unmodifiableCollection($opIntvlY('a','z'))) {
          for (Object pos:GCollections.unmodifiableCollection($opUnionY($opIntvlY(0,4),GCollections.asSet("_")))) {
            $v13.add(GCollections.asList(d,s,pos));
          }
        }
      }
      Object Q=$fix($opUnionY($v13,GCollections.asSet(3,2,5,"I","E")));
      $line=212;
      Object \u03A3_=$fix($opUnionY($opIntvlY('a','z'),GCollections.asSet(':','2','3','5')));
      $line=213;
      Object \u03A3=$fix($opUnionY(\u03A3_,GCollections.asSet('#')));
      $line=214;
      Object q_0=$fix("I");
      $line=215;
      gold.structures.set.ISet $v15=$newSet();
      $v16:for (Object d:GCollections.unmodifiableCollection(GCollections.asSet(3,2,5))) {
        for (Object s:GCollections.unmodifiableCollection($opIntvlY('a','z'))) {
          int $v17=$int(0);
          int $v18=$int(5)-1;
          for (int pos=$v17; pos<=$v18; pos++) {
            $v15.add(GCollections.asList(d,s,pos));
          }
        }
      }
      Object F=$fix($v15);
      $line=217;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,\u03A3_,q_0,F,new GMethod(NewFile.class,"\u03B41"),new GMethod(NewFile.class,"g"),new GMethod(NewFile.class,"h1")});
      if (true) break $try;
      $line=218;
      $rethrow(new RuntimeException("The function \"createDecoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"createDecoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B41(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=224;
      if (($opEqualY(state,"I")&&$opMembrY(input,GCollections.asSet('2','3','5')))) {
        $line=224;
        $result=$opSubtrY(input,'0');
        if (true) break $try;
      }
      else {
        $line=225;
        if (($opMembrY(state,GCollections.asSet(2,3,5))&&$opMembrY(input,$opIntvlY('a','z')))) {
          $line=225;
          $result=GCollections.asList(state,input,"_");
          if (true) break $try;
        }
        else {
          $line=226;
          $result="E";
          if (true) break $try;
        }
      }
      $line=228;
      $rethrow(new RuntimeException("The function \"\u03B41(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object \u03B41(java.lang.Iterable $v19, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v20=GCollections.unmodifiableCollection($v19).iterator();
      Object d=$v20.next();
      Object s=$v20.next();
      Object pos=$v20.next();
      $line=231;
      if (($opEqualY(pos,"_")&&$opEqualY(input,':'))) {
        $line=231;
        $result=GCollections.asList(d,s,1);
        if (true) break $try;
      }
      else {
        $line=232;
        if ($opEqualY(pos,"_")) {
          $line=232;
          $result="E";
          if (true) break $try;
        }
        else {
          $line=233;
          if (($opEqualY(input,'#')&&!$opEqualY(pos,0))) {
            $line=233;
            $result="E";
            if (true) break $try;
          }
          else {
            $line=234;
            if (($opEqualY(input,s)&&$opEqualY(pos,0))) {
              $line=234;
              $result="E";
              if (true) break $try;
            }
            else {
              $line=235;
              if ($opMembrY(input,$opUnionY($opIntvlY('a','z'),GCollections.asSet('#')))) {
                $line=235;
                $result=GCollections.asList(d,s,$opModulY($opAdditY(pos,1),d));
                if (true) break $try;
              }
              else {
                $line=236;
                $result="E";
                if (true) break $try;
              }
            }
          }
        }
      }
      $line=238;
      $rethrow(new RuntimeException("The function \"\u03B41(\u27E8d,s,pos\u27E9:java.lang.Iterable,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object h1(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=244;
      if (($opEqualY(state,"I")&&$opMembrY(input,GCollections.asSet('2','3','5')))) {
        $line=244;
        $result=$opSubtrY(input,'0');
        if (true) break $try;
      }
      else {
        $line=245;
        if (($opMembrY(state,GCollections.asSet(2,3,5))&&$opMembrY(input,$opIntvlY('a','z')))) {
          $line=245;
          $result=input;
          if (true) break $try;
        }
        else {
          $line=246;
          $result="";
          if (true) break $try;
        }
      }
      $line=248;
      $rethrow(new RuntimeException("The function \"h1(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"h1",$line);
    }
    return $result;
  }
  public static Object h1(java.lang.Iterable $v21, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v22=GCollections.unmodifiableCollection($v21).iterator();
      Object d=$v22.next();
      Object s=$v22.next();
      Object pos=$v22.next();
      $line=251;
      if (($opEqualY(pos,"_")&&$opEqualY(input,':'))) {
        $line=251;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=252;
        if (($opEqualY(input,'#')&&$opEqualY(pos,0))) {
          $line=252;
          $result=s;
          if (true) break $try;
        }
        else {
          $line=253;
          if (($opMembrY(input,$opIntvlY('a','z'))&&$opEqualY(pos,1))) {
            $line=253;
            $result=NewFile.shiftSymbol(input,$opMinusY(d));
            if (true) break $try;
          }
          else {
            $line=254;
            if ($opMembrY(input,$opIntvlY('a','z'))) {
              $line=254;
              $result=input;
              if (true) break $try;
            }
            else {
              $line=255;
              $result="";
              if (true) break $try;
            }
          }
        }
      }
      $line=257;
      $rethrow(new RuntimeException("The function \"h1(\u27E8d,s,pos\u27E9:java.lang.Iterable,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"h1",$line);
    }
    return $result;
  }
  public static Object shiftSymbol(Object symbol, Object shift) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=265;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=267;
      if ($opMembrY(symbol,$opIntvlY('a','z'))) {
        $line=268;
        r=$cast(Character.class,$fix($opAdditY('a',$opModulY($opAdditY($opSubtrY(symbol,'a'),shift),26))));
      }
      else {
        $line=269;
        if ($opMembrY(symbol,$opIntvlY('A','Z'))) {
          $line=270;
          r=$cast(Character.class,$fix($opAdditY('A',$opModulY($opAdditY($opSubtrY(symbol,'A'),shift),26))));
        }
        else {
          $line=271;
          if ($opMembrY(symbol,$opIntvlY('0','9'))) {
            $line=272;
            r=$cast(Character.class,$fix($opAdditY('0',$opModulY($opAdditY($opSubtrY(symbol,'0'),shift),10))));
          }
          else {
            $line=273;
            r=$cast(Character.class,$fix(r));
          }
        }
      }
      $line=275;
      $result=r;
      if (true) break $try;
      $line=276;
      $rethrow(new RuntimeException("The function \"shiftSymbol(symbol:Object,shift:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"shiftSymbol",$line);
    }
    return $result;
  }
  public static Object result(Object letter, Object pos) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=281;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=283;
      Integer rpos=null;
      rpos=$defaultValue(Integer.class);
      $line=284;
      rpos=$cast(Integer.class,$fix($opAdditY(pos,1)));
      $line=285;
      r=$cast(Character.class,$fix($opAdditY(rpos,'0')));
      $line=288;
      $result=r;
      if (true) break $try;
      $line=289;
      $rethrow(new RuntimeException("The function \"result(letter:Object,pos:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,NewFile.class,"result",$line);
    }
    return $result;
  }
}
